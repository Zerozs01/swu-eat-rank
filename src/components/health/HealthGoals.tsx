import React, { useState } from 'react';
import type { HealthGoals } from '../../types/menu';

interface HealthGoalsProps {
  goals?: HealthGoals;
  onSave: (goals: HealthGoals) => void;
}

export function HealthGoalsSettings({ goals, onSave }: HealthGoalsProps) {
  const [localGoals, setLocalGoals] = useState<HealthGoals>({
    targetHealthScore: goals?.targetHealthScore || 70,
    targetWeeklyLogs: goals?.targetWeeklyLogs || 14,
    targetStreak: goals?.targetStreak || 7,
    targetVeggieMeals: goals?.targetVeggieMeals || 7
  });

  const [isEditing, setIsEditing] = useState(false);

  const handleSave = () => {
    onSave(localGoals);
    setIsEditing(false);
  };

  const handleCancel = () => {
    setLocalGoals({
      targetHealthScore: goals?.targetHealthScore || 70,
      targetWeeklyLogs: goals?.targetWeeklyLogs || 14,
      targetStreak: goals?.targetStreak || 7,
      targetVeggieMeals: goals?.targetVeggieMeals || 7
    });
    setIsEditing(false);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-800">üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h3>
        <button
          onClick={() => setIsEditing(!isEditing)}
          className="px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors"
        >
          {isEditing ? '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'}
        </button>
      </div>

      {isEditing ? (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            </label>
            <input
              type="number"
              min="0"
              max="100"
              value={localGoals.targetHealthScore}
              onChange={(e) => setLocalGoals({
                ...localGoals,
                targetHealthScore: parseInt(e.target.value) || 0
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <div className="mt-1 text-xs text-gray-500">
              ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (0-100)
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
            </label>
            <input
              type="number"
              min="1"
              max="21"
              value={localGoals.targetWeeklyLogs}
              onChange={(e) => setLocalGoals({
                ...localGoals,
                targetWeeklyLogs: parseInt(e.target.value) || 0
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <div className="mt-1 text-xs text-gray-500">
              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (1-21)
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            </label>
            <input
              type="number"
              min="1"
              max="100"
              value={localGoals.targetStreak}
              onChange={(e) => setLocalGoals({
                ...localGoals,
                targetStreak: parseInt(e.target.value) || 0
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <div className="mt-1 text-xs text-gray-500">
              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô (1-100)
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ‡∏°‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
            </label>
            <input
              type="number"
              min="0"
              max="21"
              value={localGoals.targetVeggieMeals}
              onChange={(e) => setLocalGoals({
                ...localGoals,
                targetVeggieMeals: parseInt(e.target.value) || 0
              })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <div className="mt-1 text-xs text-gray-500">
              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏±‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå (0-21)
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4">
            <button
              onClick={handleCancel}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </button>
            <button
              onClick={handleSave}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            </button>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex justify-between items-center py-3 border-b border-gray-100">
            <div>
              <div className="font-medium text-gray-900">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</div>
              <div className="text-sm text-gray-500">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏£‡∏•‡∏∏</div>
            </div>
            <div className="text-lg font-bold text-green-600">
              {localGoals.targetHealthScore}
            </div>
          </div>

          <div className="flex justify-between items-center py-3 border-b border-gray-100">
            <div>
              <div className="font-medium text-gray-900">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</div>
              <div className="text-sm text-gray-500">‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</div>
            </div>
            <div className="text-lg font-bold text-blue-600">
              {localGoals.targetWeeklyLogs} ‡∏°‡∏∑‡πâ‡∏≠
            </div>
          </div>

          <div className="flex justify-between items-center py-3 border-b border-gray-100">
            <div>
              <div className="font-medium text-gray-900">‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</div>
              <div className="text-sm text-gray-500">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô</div>
            </div>
            <div className="text-lg font-bold text-orange-600">
              {localGoals.targetStreak} ‡∏ß‡∏±‡∏ô
            </div>
          </div>

          <div className="flex justify-between items-center py-3">
            <div>
              <div className="font-medium text-gray-900">‡∏°‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</div>
              <div className="text-sm text-gray-500">‡∏°‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏ú‡∏±‡∏Å</div>
            </div>
            <div className="text-lg font-bold text-green-600">
              {localGoals.targetVeggieMeals} ‡∏°‡∏∑‡πâ‡∏≠
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

interface HealthGoalsSummaryProps {
  goals?: HealthGoals;
  currentStats: {
    averageHealthScore: number;
    weeklyLogs: number;
    currentStreak: number;
    veggieMeals: number;
  };
}

export function HealthGoalsSummary({ goals, currentStats }: HealthGoalsSummaryProps) {
  const getProgressPercentage = (current: number, target?: number) => {
    if (!target) return 0;
    return Math.min(100, (current / target) * 100);
  };

  const getProgressColor = (percentage: number) => {
    if (percentage >= 100) return 'bg-green-500';
    if (percentage >= 75) return 'bg-blue-500';
    if (percentage >= 50) return 'bg-yellow-500';
    return 'bg-gray-300';
  };

  if (!goals) {
    return (
      <div className="bg-gray-50 border border-gray-200 rounded-xl p-6 text-center">
        <div className="text-gray-500">
          <div className="text-4xl mb-2">üéØ</div>
          <div>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</div>
          <div className="text-sm">‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏£‡∏•‡∏∏‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô</div>
        </div>
      </div>
    );
  }

  const goalsProgress = [
    {
      label: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      current: currentStats.averageHealthScore,
      target: goals.targetHealthScore,
      unit: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'
    },
    {
      label: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      current: currentStats.weeklyLogs,
      target: goals.targetWeeklyLogs,
      unit: '‡∏°‡∏∑‡πâ‡∏≠'
    },
    {
      label: '‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
      current: currentStats.currentStreak,
      target: goals.targetStreak,
      unit: '‡∏ß‡∏±‡∏ô'
    },
    {
      label: '‡∏°‡∏∑‡πâ‡∏≠‡∏ú‡∏±‡∏Å',
      current: currentStats.veggieMeals,
      target: goals.targetVeggieMeals,
      unit: '‡∏°‡∏∑‡πâ‡∏≠'
    }
  ];

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <h3 className="text-lg font-semibold text-gray-800 mb-4">üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</h3>

      <div className="space-y-4">
        {goalsProgress.map((goal, index) => {
          const progress = getProgressPercentage(goal.current, goal.target);
          const colorClass = getProgressColor(progress);

          return (
            <div key={index}>
              <div className="flex justify-between text-sm mb-2">
                <span className="font-medium text-gray-700">{goal.label}</span>
                <span className="text-gray-500">
                  {Math.round(goal.current)} / {goal.target} {goal.unit}
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={`${colorClass} h-2 rounded-full transition-all duration-500`}
                  style={{ width: `${progress}%` }}
                />
              </div>
              {progress >= 100 && (
                <div className="mt-1 text-xs text-green-600 font-medium">
                  ‚úÖ ‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!
                </div>
              )}
            </div>
          );
        })}
      </div>

      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <div className="text-sm text-blue-800">
          <div className="font-medium mb-1">üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</div>
          <div>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô</div>
        </div>
      </div>
    </div>
  );
}