import type { UserStats, LogWithMenu, UserProfile } from '../types/menu';
import { calculateBMI, getBMIInfo } from './bmiCalculator';

export interface HealthStatus {
  level: 'good' | 'moderate' | 'unhealthy' | 'at_risk';
  label: string;
  description: string;
  color: string;
  icon: string;
  concerns: string[];
  recommendations: string[];
  relatedConditions: HealthCondition[];
}

export interface HealthCondition {
  name: string;
  nameTH: string;
  likelihood: 'low' | 'medium' | 'high';
  description: string;
  prevention: string[];
  severity: 'mild' | 'moderate' | 'severe';
}

export interface HealthInsightExplanation {
  overallStatus: HealthStatus;
  primaryFactors: {
    factor: string;
    impact: 'positive' | 'negative' | 'neutral';
    description: string;
  }[];
  trendingAnalysis: {
    direction: 'improving' | 'stable' | 'declining';
    confidence: number;
    timeframe: string;
  };
  actionableAdvice: {
    category: 'diet' | 'exercise' | 'lifestyle' | 'medical';
    priority: 'high' | 'medium' | 'low';
    advice: string;
  }[];
}

// Health status determination logic
export function determineHealthStatus(
  stats: UserStats,
  logs: LogWithMenu[],
  profile?: UserProfile
): HealthStatus {
  const healthScore = stats.averageHealthScore;
  const consistency = stats.weeklyLogs >= 14 ? 'consistent' : 'inconsistent';
  const veggieRatio = stats.totalLogs > 0 ? stats.veggieMeals / stats.totalLogs : 0;
  const recentTrend = calculateRecentHealthTrend(logs);

  // Calculate BMI if profile data is available
  const bmi = profile ? calculateBMI(profile.height, profile.weight) : null;
  const bmiInfo = bmi ? getBMIInfo(bmi) : null;

  // Determine health status level with BMI consideration
  let level: HealthStatus['level'];

  // BMI significantly affects health status
  if (bmiInfo) {
    if (bmiInfo.category === 'severely_obese' || bmiInfo.category === 'obese') {
      // High BMI automatically puts user in unhealthy or at risk category
      level = bmiInfo.category === 'severely_obese' ? 'at_risk' : 'unhealthy';
    } else if (bmiInfo.category === 'underweight') {
      // Underweight combined with low health score
      level = healthScore >= 70 ? 'moderate' : 'unhealthy';
    } else {
      // Normal or overweight BMI - use original logic
      if (healthScore >= 80 && consistency === 'consistent' && veggieRatio >= 0.4) {
        level = 'good';
      } else if (healthScore >= 60 && consistency === 'consistent' && veggieRatio >= 0.3) {
        level = 'moderate';
      } else if (healthScore >= 40) {
        level = 'unhealthy';
      } else {
        level = 'at_risk';
      }
    }
  } else {
    // No BMI data - use original logic
    if (healthScore >= 80 && consistency === 'consistent' && veggieRatio >= 0.4) {
      level = 'good';
    } else if (healthScore >= 60 && consistency === 'consistent' && veggieRatio >= 0.3) {
      level = 'moderate';
    } else if (healthScore >= 40) {
      level = 'unhealthy';
    } else {
      level = 'at_risk';
    }
  }

  return getHealthStatusDetails(level, healthScore, consistency, veggieRatio, recentTrend, bmiInfo || undefined);
}

function getHealthStatusDetails(
  level: HealthStatus['level'],
  healthScore: number,
  consistency: string,
  veggieRatio: number,
  recentTrend: string,
  bmiInfo?: ReturnType<typeof getBMIInfo>
): HealthStatus {
  const baseStatuses: Record<HealthStatus['level'], Omit<HealthStatus, 'relatedConditions'>> = {
    good: {
      level: 'good',
      label: '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
      description: bmiInfo && bmiInfo.category === 'normal'
        ? '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°'
        : '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
      color: 'text-green-600 bg-green-50 border-green-200',
      icon: 'üéâ',
      concerns: [],
      recommendations: [
        '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
        '‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢',
        '‡πÅ‡∏ä‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô'
      ]
    },
    moderate: {
      level: 'moderate',
      label: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
      description: bmiInfo
        ? `‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏°‡∏µ BMI ${bmiInfo.value} (${bmiInfo.categoryTH})`
        : '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏î‡πâ',
      color: 'text-yellow-600 bg-yellow-50 border-yellow-200',
      icon: 'üòä',
      concerns: [
        healthScore < 70 ? '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô' : '',
        veggieRatio < 0.4 ? '‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ' : '',
        consistency === 'inconsistent' ? '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠' : '',
        bmiInfo?.category === 'overweight' ? `‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (BMI: ${bmiInfo.value})` : '',
        bmiInfo?.category === 'underweight' ? `‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå (BMI: ${bmiInfo.value})` : ''
      ].filter(Boolean),
      recommendations: [
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ (‡∏ô‡∏∂‡πà‡∏á/‡∏ï‡πâ‡∏°/‡∏õ‡∏¥‡πâ‡∏á)',
        '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏°‡∏∑‡πâ‡∏≠'
      ]
    },
    unhealthy: {
      level: 'unhealthy',
      label: '‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á',
      description: bmiInfo
        ? `‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á BMI ${bmiInfo.value} (${bmiInfo.categoryTH}) ‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£`
        : '‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°',
      color: 'text-orange-600 bg-orange-50 border-orange-200',
      icon: 'üòê',
      concerns: [
        '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥',
        veggieRatio < 0.3 ? '‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å' : '',
        '‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        bmiInfo?.category === 'obese' ? `‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô (BMI: ${bmiInfo.value})` : '',
        bmiInfo?.category === 'overweight' ? `‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå (BMI: ${bmiInfo.value})` : '',
        bmiInfo?.category === 'underweight' ? `‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (BMI: ${bmiInfo.value})` : ''
      ].filter(Boolean),
      recommendations: [
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏ô',
        '‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ',
        '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏£‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
        '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô'
      ]
    },
    at_risk: {
      level: 'at_risk',
      label: '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
      description: bmiInfo
        ? `‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á BMI ${bmiInfo.value} (${bmiInfo.categoryTH}) ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`
        : '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ',
      color: 'text-red-600 bg-red-50 border-red-200',
      icon: 'üòü',
      concerns: [
        '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å',
        '‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
        '‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô',
        bmiInfo?.category === 'severely_obese' ? `‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á (BMI: ${bmiInfo.value})` : '',
        bmiInfo?.category === 'obese' ? `‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô (BMI: ${bmiInfo.value})` : ''
      ].filter(Boolean),
      recommendations: [
        '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏£',
        '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
        '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ'
      ]
    }
  };

  const baseStatus = baseStatuses[level];
  const relatedConditions = generateRelatedConditions(level, healthScore, veggieRatio);

  return {
    ...baseStatus,
    relatedConditions
  };
}

function generateRelatedConditions(
  level: HealthStatus['level'],
  healthScore: number,
  veggieRatio: number
): HealthCondition[] {
  const conditions: HealthCondition[] = [];

  // Obesity risk
  if (healthScore < 50 || veggieRatio < 0.2) {
    conditions.push({
      name: 'obesity',
      nameTH: '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô',
      likelihood: healthScore < 40 ? 'high' : 'medium',
      description: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡πà‡∏á‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏î‡πâ‡∏≤‡∏ô',
      prevention: [
        '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡πà‡∏≤‡∏ö‡πÉ‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        '‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏´‡∏ß‡∏≤‡∏ô',
        '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠'
      ],
      severity: 'moderate'
    });
  }

  // Diabetes risk
  if (healthScore < 60) {
    conditions.push({
      name: 'diabetes',
      nameTH: '‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô',
      likelihood: healthScore < 40 ? 'high' : 'medium',
      description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á',
      prevention: [
        '‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏π‡∏á',
        '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï',
        '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏ß‡∏ã‡πà‡∏≤‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏Ç‡∏≤‡∏ß',
        '‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥'
      ],
      severity: 'severe'
    });
  }

  // Kidney disease risk
  if (healthScore < 45) {
    conditions.push({
      name: 'kidney_disease',
      nameTH: '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï',
      likelihood: healthScore < 35 ? 'medium' : 'low',
      description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á',
      prevention: [
        '‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÜ',
        '‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏™‡πÄ‡∏Ñ‡πá‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏™‡∏π‡∏á',
        '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï',
        '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
      ],
      severity: 'severe'
    });
  }

  // Heart disease risk
  if (healthScore < 55) {
    conditions.push({
      name: 'heart_disease',
      nameTH: '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à',
      likelihood: healthScore < 40 ? 'medium' : 'low',
      description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î',
      prevention: [
        '‡∏•‡∏î‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡πà‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤',
        '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÅ‡∏≠‡πÇ‡∏£‡∏ö‡∏¥‡∏Å',
        '‡∏á‡∏î‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà'
      ],
      severity: 'severe'
    });
  }

  // High blood pressure risk
  if (healthScore < 60) {
    conditions.push({
      name: 'hypertension',
      nameTH: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á',
      likelihood: healthScore < 45 ? 'medium' : 'low',
      description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÑ‡∏ï',
      prevention: [
        '‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏™‡πÄ‡∏Ñ‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏ã‡∏≠‡∏™‡∏ï‡πà‡∏≤‡∏á‡πÜ',
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏™‡∏π‡∏á',
        '‡∏•‡∏î‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå',
        '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å'
      ],
      severity: 'moderate'
    });
  }

  return conditions;
}

function calculateRecentHealthTrend(logs: LogWithMenu[]): string {
  const recentLogs = logs.slice(-14); // Last 14 meals
  if (recentLogs.length < 5) return 'insufficient_data';

  const firstHalf = recentLogs.slice(0, Math.floor(recentLogs.length / 2));
  const secondHalf = recentLogs.slice(Math.floor(recentLogs.length / 2));

  const firstAvg = firstHalf.reduce((sum, log) => sum + (log.menu?.healthScore || 0), 0) / firstHalf.length;
  const secondAvg = secondHalf.reduce((sum, log) => sum + (log.menu?.healthScore || 0), 0) / secondHalf.length;

  const change = ((secondAvg - firstAvg) / firstAvg) * 100;

  if (change > 10) return 'improving';
  if (change < -10) return 'declining';
  return 'stable';
}

// Generate comprehensive health insight explanation
export function generateHealthInsightExplanation(
  stats: UserStats,
  logs: LogWithMenu[],
  profile?: UserProfile
): HealthInsightExplanation {
  const overallStatus = determineHealthStatus(stats, logs, profile);
  const primaryFactors = analyzePrimaryFactors(stats, logs, profile);
  const trendingAnalysis = analyzeTrends(logs);
  const actionableAdvice = generateActionableAdvice(overallStatus, stats, logs, profile);

  return {
    overallStatus,
    primaryFactors,
    trendingAnalysis,
    actionableAdvice
  };
}

function analyzePrimaryFactors(
  stats: UserStats,
  logs: LogWithMenu[],
  profile?: UserProfile
): { factor: string; impact: 'positive' | 'negative' | 'neutral'; description: string }[] {
  const factors: { factor: string; impact: 'positive' | 'negative' | 'neutral'; description: string }[] = [];

  // Health score factor
  factors.push({
    factor: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
    impact: (stats.averageHealthScore >= 70 ? 'positive' :
             stats.averageHealthScore >= 50 ? 'neutral' : 'negative') as 'positive' | 'neutral' | 'negative',
    description: `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ${Math.round(stats.averageHealthScore)}/100 ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á${stats.averageHealthScore >= 70 ? '‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' : stats.averageHealthScore >= 50 ? '‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : '‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'}`
  });

  // Consistency factor
  factors.push({
    factor: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
    impact: stats.weeklyLogs >= 14 ? 'positive' : 'negative',
    description: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ${stats.weeklyLogs} ‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ${stats.weeklyLogs >= 14 ? '‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏î‡∏µ' : '‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£'}`
  });

  // Vegetable intake factor
  const veggieRatio = stats.totalLogs > 0 ? stats.veggieMeals / stats.totalLogs : 0;
  factors.push({
    factor: '‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å',
    impact: veggieRatio >= 0.4 ? 'positive' : veggieRatio >= 0.2 ? 'neutral' : 'negative',
    description: `‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å ${Math.round(veggieRatio * 100)}% ‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ${veggieRatio >= 0.4 ? '‡∏î‡∏µ‡∏°‡∏≤‡∏Å' : veggieRatio >= 0.2 ? '‡∏û‡∏≠‡πÉ‡∏ä‡πâ' : '‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'}`
  });

  // BMI factor
  if (profile && profile.height && profile.weight) {
    const bmi = calculateBMI(profile.height, profile.weight);
    if (bmi !== null) {
      const bmiInfo = getBMIInfo(bmi);
      factors.push({
        factor: '‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)',
        impact: (bmiInfo.category === 'normal' ? 'positive' :
                 bmiInfo.category === 'underweight' || bmiInfo.category === 'overweight' ? 'neutral' : 'negative') as 'positive' | 'neutral' | 'negative',
        description: `BMI ${bmi} (${bmiInfo.categoryTH}) ${bmiInfo.category === 'normal' ? '‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥' : '‡∏≠‡∏≤‡∏à‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'}`
      });
    }
  }

  return factors;
}

function analyzeTrends(logs: LogWithMenu[]): { direction: 'improving' | 'stable' | 'declining'; confidence: number; timeframe: string } {
  const recentTrend = calculateRecentHealthTrend(logs);
  const confidence = logs.length >= 20 ? 0.8 : logs.length >= 10 ? 0.6 : 0.4;

  const direction: 'improving' | 'stable' | 'declining' =
    recentTrend === 'improving' ? 'improving' :
    recentTrend === 'declining' ? 'declining' : 'stable';

  return {
    direction,
    confidence,
    timeframe: logs.length >= 14 ? '2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : '‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤'
  };
}

function generateActionableAdvice(
  status: HealthStatus,
  stats: UserStats,
  logs: LogWithMenu[],
  profile?: UserProfile
) {
  const advice = [];
  // Precompute BMI info once for use throughout this function
  let bmiInfo: ReturnType<typeof getBMIInfo> | null = null;
  if (profile && profile.height && profile.weight) {
    const bmi = calculateBMI(profile.height, profile.weight);
    if (bmi !== null) {
      bmiInfo = getBMIInfo(bmi);
    }
  }

  // Diet advice
  if (status.level === 'good') {
    advice.push({
      category: 'diet' as const,
      priority: 'low' as const,
      advice: bmiInfo && bmiInfo.category === 'normal'
        ? '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢'
        : '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢'
    });
  } else {
    const baseAdvice = bmiInfo
      ? bmiInfo.category === 'underweight' ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢' :
        bmiInfo.category === 'overweight' ? '‡∏•‡∏î‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏π‡∏á' :
        bmiInfo.category === 'obese' || bmiInfo.category === 'severely_obese' ? '‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏î‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç' :
        '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤'
      : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∏‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤';

    advice.push({
      category: 'diet' as const,
      priority: 'high' as const,
      advice: baseAdvice
    });
  }

  // Exercise advice
  if (status.level === 'unhealthy' || status.level === 'at_risk') {
    const exerciseAdvice = bmiInfo
      ? bmiInfo.category === 'underweight' ? '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 30 ‡∏ô‡∏≤‡∏ó‡∏µ' :
        bmiInfo.category === 'overweight' ? '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÅ‡∏≠‡πÇ‡∏£‡∏ö‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡πÑ‡∏Ç‡∏°‡∏±‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 150 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' :
        bmiInfo.category === 'obese' || bmiInfo.category === 'severely_obese' ? '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ 300 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏ú‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£' :
        '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 30 ‡∏ô‡∏≤‡∏ó‡∏µ'
      : '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 30 ‡∏ô‡∏≤‡∏ó‡∏µ';

    advice.push({
      category: 'exercise' as const,
      priority: 'high' as const,
      advice: exerciseAdvice
    });
  }

  // BMI-specific advice
  if (bmiInfo) {
      if (bmiInfo.category === 'severely_obese' || bmiInfo.category === 'obese') {
        advice.push({
          category: 'medical' as const,
          priority: 'high' as const,
          advice: '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
        });
        advice.push({
          category: 'diet' as const,
          priority: 'high' as const,
          advice: `‡∏•‡∏î‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏•‡∏∞ ${bmiInfo.category === 'severely_obese' ? '500-1000' : '300-500'} ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà`
        });
      } else if (bmiInfo.category === 'underweight') {
        advice.push({
          category: 'diet' as const,
          priority: 'medium' as const,
          advice: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
        });
      } else if (bmiInfo.category === 'overweight') {
        advice.push({
          category: 'diet' as const,
          priority: 'medium' as const,
          advice: '‡∏•‡∏î‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 300-500 ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢'
        });
  }
}

  // Medical advice
  if (status.level === 'at_risk') {
    advice.push({
      category: 'medical' as const,
      priority: 'high' as const,
      advice: '‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•'
    });
  }

  return advice;
}